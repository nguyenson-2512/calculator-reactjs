{"version":3,"sources":["components/Button/Button.js","components/Input/Input.js","components/ClearButton/ClearButton.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","onClick","clickHandle","children","className","val","isNaN","Input","input","ClearButton","clearHandle","App","addToInput","setState","state","equalHandle","math","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oWAiBeA,G,YAVA,SAACC,GACd,OACA,yBAAKC,QAAS,kBAAMD,EAAME,YAAYF,EAAMG,WAAWC,UAAS,0BAN9CC,EAOLL,EAAMG,SANXG,MAAMD,IAAgB,MAARA,GAAuB,MAARA,EAMC,WAAP,QAE9BL,EAAMG,UATU,IAACE,ICQLE,G,MARD,SAACP,GACX,OACI,yBAAKI,UAAU,SACVJ,EAAMQ,SCCJC,G,MAJK,SAACT,GACnB,OAAO,yBAAKI,UAAU,eAAeH,QAASD,EAAMU,aAAcV,EAAMG,Y,QC6D3DQ,E,kDAzDb,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IAMRY,WAAa,SAAAP,GACX,EAAKQ,SAAS,CACZL,MAAO,EAAKM,MAAMN,MAAQH,KATX,EAanBU,YAAc,WACZ,EAAKF,SAAS,CACZL,MAAOQ,IAAc,EAAKF,MAAMN,UAblC,EAAKM,MAAQ,CACXN,MAAO,IAHQ,E,qDAmBT,IAAD,OACT,OACE,yBAAKJ,UAAU,OACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CAAOI,MAAOS,KAAKH,MAAMN,QACzB,yBAAKJ,UAAU,OACb,kBAAC,EAAD,CAAQF,YAAae,KAAKL,YAA1B,KACA,kBAAC,EAAD,CAAQV,YAAae,KAAKL,YAA1B,KACA,kBAAC,EAAD,CAAQV,YAAae,KAAKL,YAA1B,KACA,kBAAC,EAAD,CAAQV,YAAae,KAAKL,YAA1B,MAEF,yBAAKR,UAAU,OACb,kBAAC,EAAD,CAAQF,YAAae,KAAKL,YAA1B,KACA,kBAAC,EAAD,CAAQV,YAAae,KAAKL,YAA1B,KACA,kBAAC,EAAD,CAAQV,YAAae,KAAKL,YAA1B,KACA,kBAAC,EAAD,CAAQV,YAAae,KAAKL,YAA1B,MAEF,yBAAKR,UAAU,OACb,kBAAC,EAAD,CAAQF,YAAae,KAAKL,YAA1B,KACA,kBAAC,EAAD,CAAQV,YAAae,KAAKL,YAA1B,KACA,kBAAC,EAAD,CAAQV,YAAae,KAAKL,YAA1B,KACA,kBAAC,EAAD,CAAQV,YAAae,KAAKL,YAA1B,MAEF,yBAAKR,UAAU,OACb,kBAAC,EAAD,CAAQF,YAAae,KAAKL,YAA1B,KACA,kBAAC,EAAD,CAAQV,YAAae,KAAKL,YAA1B,KACA,kBAAC,EAAD,CAAQV,YAAa,kBAAM,EAAKa,gBAAhC,KACA,kBAAC,EAAD,CAAQb,YAAae,KAAKL,YAA1B,MAEF,yBAAKR,UAAU,OACb,kBAAC,EAAD,CAAaM,YAAa,WAAO,EAAKG,SAAS,CAACL,MAAO,OAAvD,gB,GAlDQU,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.70fc2d85.chunk.js","sourcesContent":["import React from 'react'\nimport './Button.css'\n\nconst isOperator = (val) => {\n  return !isNaN(val) || val === \".\" || val === \"=\"\n}\n\nconst Button = (props) => {\n  return(\n  <div onClick={() => props.clickHandle(props.children)} className={`button-wrapper ${\n    isOperator(props.children) ? null : \"operator\"\n  }`}>\n  {props.children}\n  </div>\n  )\n}\n\nexport default Button","import React from 'react'\nimport './Input.css'\n\nconst Input = (props) => {\n    return(\n        <div className=\"input\">\n            {props.input}\n        </div>\n    )\n}\n\nexport default Input","import React from \"react\";\nimport \"./ClearButton.css\";\n\nconst ClearButton = (props) => {\n  return <div className=\"clear-button\" onClick={props.clearHandle}>{props.children}</div>;\n};\n\nexport default ClearButton;\n","import React from 'react';\nimport './App.css';\nimport Button from './components/Button/Button'\nimport Input from './components/Input/Input'\nimport ClearButton from './components/ClearButton/ClearButton'\nimport * as math from 'mathjs'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      input: \"\"\n    }\n  }\n\n  addToInput = val => {\n    this.setState({\n      input: this.state.input + val\n    })\n  }\n\n  equalHandle = () => {\n    this.setState({\n      input: math.evaluate(this.state.input)\n    })\n  }\n\n  render() {\n  return (\n    <div className=\"App\">\n      <div className=\"calc-wrapper\">\n        <Input input={this.state.input}></Input>\n        <div className=\"row\">\n          <Button clickHandle={this.addToInput}>7</Button>\n          <Button clickHandle={this.addToInput}>8</Button>\n          <Button clickHandle={this.addToInput}>9</Button>\n          <Button clickHandle={this.addToInput}>/</Button>\n        </div>\n        <div className=\"row\">\n          <Button clickHandle={this.addToInput}>4</Button>\n          <Button clickHandle={this.addToInput}>5</Button>\n          <Button clickHandle={this.addToInput}>6</Button>\n          <Button clickHandle={this.addToInput}>x</Button>\n        </div>\n        <div className=\"row\">\n          <Button clickHandle={this.addToInput}>1</Button>\n          <Button clickHandle={this.addToInput}>2</Button>\n          <Button clickHandle={this.addToInput}>3</Button>\n          <Button clickHandle={this.addToInput}>+</Button>\n        </div>\n        <div className=\"row\">\n          <Button clickHandle={this.addToInput}>.</Button>\n          <Button clickHandle={this.addToInput}>0</Button>\n          <Button clickHandle={() => this.equalHandle()}>=</Button>\n          <Button clickHandle={this.addToInput}>-</Button>\n        </div>\n        <div className=\"row\">\n          <ClearButton clearHandle={() => {this.setState({input: \"\"})}}>Clear</ClearButton>\n        </div>\n      </div>\n    </div>\n  )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}